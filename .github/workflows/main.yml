name: Release build

on: [push, pull_request]
# on: # Make a release build
#   workflow_dispatch:

jobs:
  build-windows:
    if: true  # Disabled temporarily due to build issues
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install build deps
        run: choco install -y directx-sdk zip --no-progress --yes
        shell: powershell

      - name: Download and Extract VCE9 release
        run: |
          $url = "https://github.com/djdiskmachine/VCE9/releases/download/v1.0.0/Microsoft.Visual.Studio.9.0.zip"
          $destination = "C:\Program Files (x86)\"
          New-Item -ItemType Directory -Force -Path $destination | Out-Null
          Invoke-WebRequest -Uri $url -OutFile "$env:TEMP\VCE9.zip"
          Expand-Archive -Path "$env:TEMP\VCE9.zip" -DestinationPath $destination -Force
        shell: pwsh

      - name: Download and Extract Microsoft SDKs 
        run: |
          $url = "https://github.com/djdiskmachine/VCE9/releases/download/v1.0.0/Microsoft.SDKs.zip"
          $destination = "C:\Program Files\"
          New-Item -ItemType Directory -Force -Path $destination | Out-Null
          Invoke-WebRequest -Uri $url -OutFile "$env:TEMP\SDK.zip"
          Expand-Archive -Path "$env:TEMP\SDK.zip" -DestinationPath $destination -Force
        shell: pwsh

      - name: Display folders
        run: |  
          $folderPath = "C:\Program Files\Microsoft SDKs\Windows\v6.0A\"
          if (Test-Path -Path $folderPath) {
            Get-ChildItem -Path $folderPath
          } else {
            Write-Output "Folder does not exist: $folderPath"
          }
          $folderPath = "C:\Program Files\Microsoft SDKs\Windows\"
          if (Test-Path -Path $folderPath) {
            Get-ChildItem -Path $folderPath
          } else {
            Write-Output "Folder does not exist: $folderPath"
          }
          $folderPath = "C:\Program Files\Microsoft SDKs\"
          if (Test-Path -Path $folderPath) {
            Get-ChildItem -Path $folderPath
          } else {
            Write-Output "Folder does not exist: $folderPath"
          }  
        shell: pwsh

      - name: Set environment variables
        run: |
          # Set INCLUDE and LIB environment variables
          $vcIncludePath = "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include"
          $vcLibPath = "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\lib"
          $sdkIncludePath = "C:\Program Files\Microsoft SDKs\Windows\v6.0A\Include"
          $sdkLibPath = "C:\Program Files\Microsoft SDKs\Windows\v6.0A\Lib"
          
          $newInclude = "$vcIncludePath;$sdkIncludePath;$env:INCLUDE"
          $newLib = "$vcLibPath;$sdkLibPath;$env:LIB"
          $newPath = "$env:PATH;$vcIncludePath;$sdkIncludePath"

          # Correctly set the INCLUDE and LIB environment variables for the GitHub environment
          echo "INCLUDE=$newInclude" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "LIB=$newLib" | Out-File -Append -FilePath $env:GITHUB_ENV 
          
          Write-Host "INCLUDE: $newInclude"
          Write-Host "LIB: $newLib"
          Write-Host "PATH: $newPath"
        shell: pwsh

      - name: Verify environment variables
        run: |
          Write-Host "INCLUDE: $env:INCLUDE"
          Write-Host "LIB: $env:LIB"
          Write-Host "PATH: $env:PATH"
        shell: pwsh

      - name: Build Solution
        working-directory: projects
        run: |
          Write-Host "Setting up Visual Studio environment..."
          & "C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\Tools\vsvars32.bat"
          
          # Correctly set INCLUDE, LIB, and PATH without overwriting
          $env:INCLUDE = "C:\Program Files\Microsoft SDKs\Windows\v6.0A\Include;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include;" + $env:INCLUDE
          $env:LIB = "C:\Program Files\Microsoft SDKs\Windows\v6.0A\Lib;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\lib;" + $env:LIB
          $env:PATH = "C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bin;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin;" + $env:PATH
          $env:PATH = "C:\Program Files\Microsoft SDKs\Windows\v6.0A\Include;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include;" + $env:PATH

          Write-Host "INCLUDE: $env:INCLUDE"
          Write-Host "LIB: $env:LIB"
          Write-Host "PATH: $env:PATH"
          
          # Print the directories to ensure they are correct
          Write-Host "Contents of INCLUDE directories:"
          Get-ChildItem "C:\Program Files\Microsoft SDKs\Windows\v6.0A\Include"
          Get-ChildItem "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\include"
          
          Write-Host "Contents of LIB directories:"
          Get-ChildItem "C:\Program Files\Microsoft SDKs\Windows\v6.0A\Lib"
          Get-ChildItem "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\lib"
          
          Write-Host "Contents of PATH directories:"
          Get-ChildItem "C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bin"
          Get-ChildItem "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin"
          
          & "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcpackages\vcbuild.exe" "lgpt.sln" "Release|Win32"
        shell: pwsh 
      
      - name: Package build
        shell: bash
        working-directory: projects
        run: |
          mv ./bin/lgpt.exe  projects/lgpt-W32.exe
          ./resources/packaging/lgpt_package.sh

      - name: Extract Git tag name
        id: extract_tag
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload win release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          files: ./projects/*.zip

  build-deb:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Install required libraries
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install -y make gcc-multilib g++-multilib libsdl1.2-dev:i386 libasound2-plugins:i386 libjack-dev:i386

      - name: Build DEB
        working-directory: projects
        run: make PLATFORM=DEB

      - name: Package build
        working-directory: projects
        run: ./resources/packaging/lgpt_package.sh

      - name: Extract Git tag name
        id: extract_tag
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          files: ./projects/*.zip

  build-psp:
    runs-on: ubuntu-latest
    env:
      PSPDEV: ${{ github.workspace }}/pspdev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install required libraries
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake pkgconf libusb-0.1-4 libgpgme11 libarchive-tools fakeroot

      - name: Set up PSP dev kit
        run: |
          echo "$PSPDEV/bin" >> $GITHUB_PATH 
          git clone https://github.com/djdiskmachine/pspdev

      - name: Build PSP
        working-directory: projects
        run: make PLATFORM=PSP

      - name: Package build
        working-directory: projects
        run: ./resources/packaging/lgpt_package.sh

      - name: Extract Git tag name
        id: extract_tag
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          files: ./projects/*.zip

  build-miyoo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Miyoo Mini toolchain
        run: |
          wget -O /tmp/miyoomini-toolchain.tar.xz https://github.com/djdiskmachine/miyoomini-toolchain-buildroot/releases/download/1.0.0/miyoomini-toolchain.tar.xz
          mkdir /opt/miyoomini-toolchain
          tar -xvf /tmp/miyoomini-toolchain.tar.xz -C /opt/miyoomini-toolchain  --strip-components=1

      - name: Build Miyoo Mini
        working-directory: projects
        run: |
          make PLATFORM=MIYOO

      - name: Package build
        working-directory: projects
        run: |
            ./resources/packaging/lgpt_package.sh

      - name: Extract Git tag name
        id: extract_tag
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          files: ./projects/*.zip
