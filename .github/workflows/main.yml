name: Release build

on: [push, pull_request]
# on: # Make a release build
#   workflow_dispatch:

jobs:
  build-windows:
    if: true  # Disabled temporarily due to build issues
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install build deps
        run: choco install -y directx-sdk zip --no-progress --yes
        shell: powershell

      - name: Download and Extract VCE9 release
        run: |
          $url = "https://github.com/djdiskmachine/VCE9/releases/download/v1.0.0/Microsoft.Visual.Studio.9.0.zip"
          $destination = "C:\Program Files (x86)\"
          New-Item -ItemType Directory -Force -Path $destination | Out-Null
          Invoke-WebRequest -Uri $url -OutFile "$env:TEMP\VCE9.zip"
          Expand-Archive -Path "$env:TEMP\VCE9.zip" -DestinationPath $destination -Force
        shell: pwsh
  
      - name: Download Windows SDK
        run: |
          $url = "https://download.microsoft.com/download/1/3/C/13CABC90-49C0-47F9-9B68-B6DAFA9F6E0C/GRMSDK_EN_DVD.iso"
          $output = "C:\WindowsSdk.iso"
          Invoke-WebRequest -Uri $url -OutFile $output
        shell: pwsh
  
      - name: Mount ISO and Install Windows SDK
        run: |
          Mount-DiskImage -ImagePath "C:\WindowsSdk.iso"
          $driveLetter = (Get-DiskImage -ImagePath "C:\WindowsSdk.iso" | Get-Volume).DriveLetter
          & "$driveLetter`:\"setup.exe" /q /norestart
        shell: pwsh
  
      - name: Unmount ISO
        run: |
          Dismount-DiskImage -ImagePath "C:\WindowsSdk.iso"
        shell: pwsh
      - name: Build Solution
        working-directory: projects
        run: |
          & "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcpackages\vcbuild.exe" "lgpt.sln" "Release|Win32"
        shell: pwsh 
      
      - name: Package build
        shell: bash
        working-directory: projects
        run: |
          mv ./bin/lgpt.exe  projects/lgpt-W32.exe
          ./resources/packaging/lgpt_package.sh

      - name: Extract Git tag name
        id: extract_tag
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload win release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          files: ./projects/*.zip

  build-deb:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Install required libraries
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install -y make gcc-multilib g++-multilib libsdl1.2-dev:i386 libasound2-plugins:i386 libjack-dev:i386

      - name: Build DEB
        working-directory: projects
        run: make PLATFORM=DEB

      - name: Package build
        working-directory: projects
        run: ./resources/packaging/lgpt_package.sh

      - name: Extract Git tag name
        id: extract_tag
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          files: ./projects/*.zip

  build-psp:
    runs-on: ubuntu-latest
    env:
      PSPDEV: ${{ github.workspace }}/pspdev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install required libraries
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake pkgconf libusb-0.1-4 libgpgme11 libarchive-tools fakeroot

      - name: Set up PSP dev kit
        run: |
          echo "$PSPDEV/bin" >> $GITHUB_PATH 
          git clone https://github.com/djdiskmachine/pspdev

      - name: Build PSP
        working-directory: projects
        run: make PLATFORM=PSP

      - name: Package build
        working-directory: projects
        run: ./resources/packaging/lgpt_package.sh

      - name: Extract Git tag name
        id: extract_tag
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          files: ./projects/*.zip

  build-miyoo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Miyoo Mini toolchain
        run: |
          wget -O /tmp/miyoomini-toolchain.tar.xz https://github.com/djdiskmachine/miyoomini-toolchain-buildroot/releases/download/1.0.0/miyoomini-toolchain.tar.xz
          mkdir /opt/miyoomini-toolchain
          tar -xvf /tmp/miyoomini-toolchain.tar.xz -C /opt/miyoomini-toolchain  --strip-components=1

      - name: Build Miyoo Mini
        working-directory: projects
        run: |
          make PLATFORM=MIYOO

      - name: Package build
        working-directory: projects
        run: |
            ./resources/packaging/lgpt_package.sh

      - name: Extract Git tag name
        id: extract_tag
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          files: ./projects/*.zip
