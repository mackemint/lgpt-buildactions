name: Release build

on: [push, pull_request]
# on: # Make a release build
#   workflow_dispatch:

jobs:
  build-windows:
    if: true  # Disabled temporarily due to build issues
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install build deps
        run: choco install -y directx-sdk zip --no-progress --yes
        shell: powershell

      - name: Download and Extract VCE9 release
        run: |
          $url = "https://github.com/djdiskmachine/VCE9/releases/download/v1.0.0/Microsoft.Visual.Studio.9.0.zip"
          $destination = "C:\Program Files (x86)\"
          New-Item -ItemType Directory -Force -Path $destination | Out-Null
          Invoke-WebRequest -Uri $url -OutFile "$env:TEMP\VCE9.zip"
          Expand-Archive -Path "$env:TEMP\VCE9.zip" -DestinationPath $destination -Force
        shell: pwsh

      - name: Install Visual Studio 2008 Express
        run: |
          Invoke-WebRequest -Uri "http://download.microsoft.com/download/8/B/5/8B5804AD-4990-40D0-A6AA-CE894CBBB3DC/VS2008ExpressENUX1397868.iso" -OutFile "$env:GITHUB_WORKSPACE\VS2008ExpressENUX1397868.iso"
          $mountResult = Mount-DiskImage -ImagePath "$env:GITHUB_WORKSPACE\VS2008ExpressENUX1397868.iso" -PassThru
          $driveLetter = ($mountResult | Get-Volume).DriveLetter
          Write-Host "ISO mounted to drive letter $driveLetter"
          $driveLetter = (Get-DiskImage -ImagePath "$env:GITHUB_WORKSPACE\VS2008ExpressENUX1397868.iso" | Get-Volume).DriveLetter
          Start-Process -FilePath "${driveLetter}:\VCExpress\setup.exe" -ArgumentList '/q', '/norestart' -Wait
        shell: pwsh

      - name: Build Solution
        working-directory: projects
        run: |
          & "C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\Tools\vsvars32.bat"
          & "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcpackages\vcbuild.exe" "lgpt.sln" "Release|Win32"
        shell: pwsh 
      
      - name: Package build
        shell: bash
        working-directory: projects
        run: |
          curl -L -o lgpt-resources.zip https://github.com/djdiskmachine/lgpt-resources/archive/refs/tags/1.0.zip
          unzip lgpt-resources.zip
          mv lgpt-resources-1.0/*/ ./resources/packaging
          rm -rf lgpt-resources-1.0*
          ./resources/packaging/lgpt_package.sh

      - name: Extract tag
        id: extract_tag
        run: |
          if [[ "${{ github.event_name }}" == 'push' && "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "tag_name=branch-${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi


      - name: Upload win release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.tag_name }}
          files: ./projects/*.zip

  build-deb:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Install required libraries
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install -y make gcc-multilib g++-multilib libsdl1.2-dev:i386 libasound2-plugins:i386 libjack-dev:i386

      - name: Build DEB
        working-directory: projects
        run: make PLATFORM=DEB

      - name: Package build
        working-directory: projects
        run: |
          curl -L -o lgpt-resources.zip https://github.com/djdiskmachine/lgpt-resources/archive/refs/tags/1.0.zip
          unzip lgpt-resources.zip
          mv lgpt-resources-1.0/*/ ./resources/packaging
          rm -rf lgpt-resources-1.0
          ./resources/packaging/lgpt_package.sh

      - name: Extract tag
        id: extract_tag
        run: |
          if [[ "${{ github.event_name }}" == 'push' && "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "tag_name=branch-${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi


      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.tag_name }}
          files: ./projects/*.zip

  build-psp:
    runs-on: ubuntu-latest
    env:
      PSPDEV: ${{ github.workspace }}/pspdev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install required libraries
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake pkgconf libusb-0.1-4 libgpgme11 libarchive-tools fakeroot

      - name: Set up PSP dev kit
        run: |
          echo "$PSPDEV/bin" >> $GITHUB_PATH 
          git clone https://github.com/djdiskmachine/pspdev

      - name: Build PSP
        working-directory: projects
        run: make PLATFORM=PSP

      - name: Package build
        working-directory: projects
        run: |
          curl -L -o lgpt-resources.zip https://github.com/djdiskmachine/lgpt-resources/archive/refs/tags/1.0.zip
          unzip lgpt-resources.zip
          mv lgpt-resources-1.0/*/ ./resources/packaging
          rm -rf lgpt-resources-1.0
          ./resources/packaging/lgpt_package.sh

      - name: Extract tag
        id: extract_tag
        run: |
          if [[ "${{ github.event_name }}" == 'push' && "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "tag_name=branch-${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi


      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.tag_name }}
          files: ./projects/*.zip

  build-miyoo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Miyoo Mini toolchain
        run: |
          wget -O /tmp/miyoomini-toolchain.tar.xz https://github.com/djdiskmachine/miyoomini-toolchain-buildroot/releases/download/1.0.0/miyoomini-toolchain.tar.xz
          mkdir /opt/miyoomini-toolchain
          tar -xvf /tmp/miyoomini-toolchain.tar.xz -C /opt/miyoomini-toolchain  --strip-components=1

      - name: Build Miyoo Mini
        working-directory: projects
        run: |
          make PLATFORM=MIYOO

      - name: Package build
        working-directory: projects
        run: |
          curl -L -o lgpt-resources.zip https://github.com/djdiskmachine/lgpt-resources/archive/refs/tags/1.0.zip
          unzip lgpt-resources.zip
          mv lgpt-resources-1.0/*/ ./resources/packaging
          rm -rf lgpt-resources-1.0
          ./resources/packaging/lgpt_package.sh

      - name: Extract tag
        id: extract_tag
        run: |
          if [[ "${{ github.event_name }}" == 'push' && "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "tag_name=branch-${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi


      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.tag_name }}
          files: ./projects/*.zip

  build-bittboy:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Install Bittboy toolchain
          run: |
            wget -O /tmp/arm-buildroot-linux-musleabi_sdk-buildroot.tar.xz https://github.com/djdiskmachine/MiyooMini-toolchain/releases/download/toolchain/miyoo-toolchain-v2.0.0-arm-buildroot-linux-musleabi_sdk-buildroot.tar.gz
            mkdir /opt/arm-buildroot-linux-musleabi_sdk-buildroot
            tar -xvf /tmp/arm-buildroot-linux-musleabi_sdk-buildroot.tar.xz -C /opt/arm-buildroot-linux-musleabi_sdk-buildroot  --strip-components=1

        - name: Build Bittboy
          working-directory: projects
          run: make PLATFORM=BITTBOY

        - name: Package build
          working-directory: projects
          run: |
            curl -L -o lgpt-resources.zip https://github.com/djdiskmachine/lgpt-resources/archive/refs/tags/1.0.zip
            unzip lgpt-resources.zip
            mv lgpt-resources-1.0/*/ ./resources/packaging
            rm -rf lgpt-resources-1.0
            ./resources/packaging/lgpt_package.sh

        - name: Extract Git tag name
          id: extract_tag
          run: echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
          env:
            GITHUB_REF: ${{ github.ref }}

        - name: Upload build release
          uses: softprops/action-gh-release@v2
          with:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            tag_name: ${{ steps.extract_tag.outputs.tag_name }}
            files: ./projects/*.zip

  build-rg35xx:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install required libraries
        run: sudo apt update && sudo apt install -y python3-pil

      - name: Clone Docker repository
        run: git clone https://github.com/edemirkan/rg35xx-toolchain.git
          
      - name: Clone and build LGPT
        working-directory: rg35xx-toolchain
        run: |
          docker run -d --name rg35xx-toolchain-container -v "$(pwd)/workspace:/root/workspace" aveferrum/rg35xx-toolchain sleep infinity
          docker exec rg35xx-toolchain-container git clone https://github.com/djdiskmachine/littlegptracker.git /root/workspace/LittleGPTracker
          docker exec rg35xx-toolchain-container /bin/bash -c "cd LittleGPTracker/projects && make PLATFORM=RG35XX"

      - name: Package build
        working-directory: rg35xx-toolchain/workspace/LittleGPTracker/projects
        run: |
          curl -L -o lgpt-resources.zip https://github.com/djdiskmachine/lgpt-resources/archive/refs/tags/1.0.zip
          unzip lgpt-resources.zip
          mv lgpt-resources-1.0/*/ ./resources/packaging
          rm -rf lgpt-resources*
          ./resources/packaging/lgpt_package.sh

      - name: Extract Git tag name
        id: extract_tag
        run: echo "::set-output name=tag_name::${GITHUB_REF#refs/tags/}"
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Upload build release
        uses: softprops/action-gh-release@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          files: ./rg35xx-toolchain/workspace/LittleGPTracker/projects/*.zip
          